# -*- coding: utf-8 -*-
"""EDA MIPRESS men2b.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ztvE1e5DNxFGm5-A3yeNqfH7DfSeuz8S
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot     as plt
import matplotlib.patches    as mpatches
import seaborn               as sns
import sklearn.metrics       as Metrics
import requests
sns.set(style="whitegrid")
import time

from pandas import json_normalize

nit=''  #here you insert the ID of the hospital or health enterprise you work on
date='' #date for data you want yo return from the API
token='' #token is specific for the IPS

url = f'https://wsmipres.sispro.gov.co/WSMIPRESNOPBS/api/Prescripcion/{nit}/{date}/{token}'

req = requests.get(url)

res = req.json()

res #API response TEST

data = [s['prescripcion'] for s in res]
df_prescripcion = pd.DataFrame(data)

df_servicios_complementarios = pd.json_normalize(res, record_path=['serviciosComplementarios'])  #complementary health services
df_servicios_complementarios

df_meds = pd.json_normalize(res, record_path=['medicamentos'], max_level=1)  #medications here we access patients medications
df_meds.columns

df_principios_act = pd.json_normalize(res, record_path=['medicamentos','PrincipiosActivos'], max_level=1)  #active principles for drugs.
df_principios_act

dates = pd.date_range(start='31/1/2022', periods=7, freq='M')  #here we define the date range for consulting the API.
dates

#dates = pd.date_range(start='31/1/2022', periods=7, freq='M')

def charge_tables(date_range):
    df_prescripcion = pd.DataFrame()
    df_servicios_complementarios = pd.DataFrame()
    df_meds = pd.DataFrame()
    df_principios_act = pd.DataFrame()
    df_principios_nutri = pd.DataFrame()
    df_procedimientos = pd.DataFrame()
    for date in dates:
      req = requests.get('https://wsmipres.sispro.gov.co/WSMIPRESNOPBS/api/Prescripcion/900496641/{}/148CA3F2-9233-411E-A728-76CE02ABFED5'.format(date))
      if req.status_code == 200:
          res = req.json()
          desc_data = pd.DataFrame([s['prescripcion'] for s in res])
          df_prescripcion = df_prescripcion.append(desc_data)
          serv_data = pd.json_normalize(res, record_path=['servicios_complementarios'], max_level=1)
          df_servicios_complementarios = df_servicios_complementarios.append(serv_data)
          med_data = pd.json_normalize(res, record_path=['medicamentos'], max_level=1)
          df_meds = df_meds.append(med_data)
          princip_act_data = pd.json_normalize(res, record_path=['medicamentos','PrincipiosActivos'], max_level=1)
          df_principios_act = df_principios_act.append(princip_act_data)
          nutri_data = pd.json_normalize(res, record_path=['productosnutricionales'], max_level=1)
          df_principios_nutri = df_principios_nutri.append(nutri_data)
          proce_data = data_proce = pd.DataFrame([s['procedimientos'] for s in res])
          df_procedimientos = df_procedimientos.append(proce_data)
      else: 
          print("Request to {} failed".format(date))
      time.sleep(1)
    return df_prescripcion, df_servicios_complementarios, df_meds, df_principios_act, df_principios_nutri, df_procedimientos

df_prescripcion

type(res)

def func_get_BI_MIPRES_prescripcion():  #This function iterates the API response for a daterange and can create 5 different dataframes from a nested json object in order to extract data from medical prescriptions on patients in Colombia


    dates = pd.date_range(start='27/11/2022', end = pd.datetime.today(),freq='D')

    dates = dates.tolist()

    print(dates)

    dates2 = []
    for i in dates:
      dates2.append(i.strftime("%Y-%m-%d"))
      
    print(dates2)

    def charge_tables(dates2):
        df_prescripcion = pd.DataFrame()
        df_servicios_complementarios = pd.DataFrame()
        df_meds = pd.DataFrame()
        df_principios_act = pd.DataFrame()
        df_principios_nutri = pd.DataFrame()
        df_procedimientos = pd.DataFrame()
        for date in dates2:
          url=f'https://wsmipres.sispro.gov.co/WSMIPRESNOPBS/api/Prescripcion/{nit}/{date}/{token}'
          req = requests.get(url)
          if req.status_code == 200:
              res = req.json()
              for obj in res:    
                No_prescripcion = obj['prescripcion']['NoPrescripcion']      
                desc_data = pd.DataFrame([s['prescripcion'] for s in res])
                df_prescripcion = df_prescripcion.append(desc_data)
                serv_data = pd.json_normalize(res, record_path=['serviciosComplementarios'])
                serv_data['NoPrescripcion'] = No_prescripcion
                df_servicios_complementarios = df_servicios_complementarios.append(serv_data)
                med_data = pd.json_normalize(res, record_path=['medicamentos'], max_level=1)
                med_data['NoPrescripcion'] = No_prescripcion
                df_meds = df_meds.append(med_data)
                princip_act_data = pd.json_normalize(res, record_path=['medicamentos','PrincipiosActivos'], max_level=1)
                princip_act_data['NoPrescripcion'] = No_prescripcion
                df_principios_act = df_principios_act.append(princip_act_data)
                nutri_data = pd.json_normalize(res, record_path=['productosnutricionales'], max_level=1)
                nutri_data['NoPrescripcion'] = No_prescripcion
                df_principios_nutri = df_principios_nutri.append(nutri_data)
                proce_data = pd.DataFrame([s['procedimientos'] for s in res])
                proce_data['NoPrescripcion'] = No_prescripcion
                df_procedimientos = df_procedimientos.append(proce_data)
                proce_data['NoPrescripcion'] = No_prescripcion
                #tables = [df_servicios_complementarios, df_meds, df_principios_act, df_principios_nutri, df_procedimientos]
                #for i in tables: 
                  #i['NoPrescripcion'] = df_prescripcion['NoPrescripcion'] --use this code to get the NoPrescripcion key that can relate data from different tables 
          else: 
              print("Request to {} failed".format(date))

        return df_prescripcion, df_servicios_complementarios, df_meds, df_principios_act, df_principios_nutri, df_procedimientos

    [df_prescripcion, df_servicios_complementarios, df_meds, df_principios_act, df_principios_nutri, df_procedimientos] = charge_tables(dates2)
    
    print(df_prescripcion.columns)
    
    #se procesa columnas para llevarlas a datetime, dado qué luego de leer la API, pandas las interpreta cómo tipo string
    date_columns = ['FPrescripcion']

    for i in date_columns:
        df_prescripcion[i] = df_prescripcion[i].astype(str)
        df_prescripcion[i] = df_prescripcion[i].str.strip()
        df_prescripcion[i] = pd.to_datetime(df_prescripcion[i], format="%Y-%m-%d", errors = 'coerce')

    df_prescripcion['HPrescripcion'] = pd.to_datetime(df_prescripcion['HPrescripcion'], format="H%:M%", errors = 'coerce')

    missing_columns = ['FechaProceso']
    for i in missing_columns:
        df_prescripcion[i] = datetime.now().strftime("%Y-%m-%d")
        
    df_prescripcion = df_prescripcion[['NoPrescripcion', 'FPrescripcion', 'HPrescripcion', 'CodHabIPS',
       'TipoIDIPS', 'NroIDIPS', 'CodDANEMunIPS', 'DirSedeIPS', 'TelSedeIPS',
       'TipoIDProf', 'NumIDProf', 'PNProfS', 'SNProfS', 'PAProfS', 'SAProfS',
       'RegProfS', 'TipoIDPaciente', 'NroIDPaciente', 'PNPaciente',
       'SNPaciente', 'PAPaciente', 'SAPaciente', 'CodAmbAte', 'RefAmbAte',
       'PacCovid19', 'EnfHuerfana', 'CodEnfHuerfana', 'EnfHuerfanaDX',
       'CodDxPpal', 'CodDxRel1', 'CodDxRel2', 'SopNutricional', 'CodEPS',
       'TipoIDMadrePaciente', 'NroIDMadrePaciente', 'TipoTransc',
       'TipoIDDonanteVivo', 'NroIDDonanteVivo', 'EstPres','FechaProceso']]

    df_meds.drop(['PrincipiosActivos','IndicacionesUNIRS'], axis=1, inplace=True)   
    
    df_meds = df_meds[['ConOrden', 'TipoMed', 'TipoPrest', 'CausaS1', 'CausaS2', 'CausaS3',
       'MedPBSUtilizado', 'RznCausaS31', 'DescRzn31', 'RznCausaS32',
       'DescRzn32', 'CausaS4', 'MedPBSDescartado', 'RznCausaS41', 'DescRzn41',
       'RznCausaS42', 'DescRzn42', 'RznCausaS43', 'DescRzn43', 'RznCausaS44',
       'DescRzn44', 'CausaS5', 'RznCausaS5', 'CausaS6', 'DescMedPrinAct',
       'CodFF', 'CodVA', 'JustNoPBS', 'Dosis', 'DosisUM', 'NoFAdmon',
       'CodFreAdmon', 'IndEsp', 'CanTrat', 'DurTrat', 'CantTotalF',
       'UFCantTotal', 'IndRec', 'EstJM','NoPrescripcion']]
    
    float_col_meds = [
    'ConOrden',
    'TipoMed',
    'TipoPrest',
    'CodFreAdmon',
    'IndEsp',
    'DurTrat',
    'EstJM',
    ]

    for i in float_col_meds:
        df_meds[i] = df_meds[i].astype(str)
        df_meds[i] = df_meds[i].replace(' ','')
        df_meds[i] = pd.to_numeric(df_meds[i], errors='coerce')
        
    
    tonumeric_cols = ['CanForm','CadaFreUso','Cant','CantTotal']
    df_prescripcion[tonumeric_cols] = df_prescripcion[tonumeric_cols].apply(pd.to_numeric, errors='coerce', axis=1)

    df_servicios_complementarios = df_servicios_complementarios[['ConOrden', 'TipoPrest', 'CausaS1', 'CausaS2', 'CausaS3', 'CausaS4',
       'DescCausaS4', 'CausaS5', 'CodSerComp', 'DescSerComp', 'CanForm',
       'CadaFreUso', 'CodFreUso', 'Cant', 'CantTotal', 'CodPerDurTrat',
       'TipoTrans', 'ReqAcom', 'TipoIDAcomAlb', 'NroIDAcomAlb',
       'ParentAcomAlb', 'NombAlb', 'CodMunOriAlb', 'CodMunDesAlb', 'JustNoPBS',
       'IndRec', 'EstJM','NoPrescripcion']]
    
    toint_cols = ['CanForm','CadaFreUso','Cant','CantTotal']
    df_servicios_complementarios[toint_cols] = df_servicios_complementarios[toint_cols].apply(pd.to_numeric, errors='coerce', axis=1)

    
    df_principios_act = df_principios_act[['ConOrden', 'CodPriAct', 'ConcCant', 'UMedConc', 'CantCont',
       'UMedCantCont','NoPrescripcion']]
    
    to_int_cols_act = ['ConcCant','CantCont','Cant','CantTotal']
    df_principios_act[to_int_cols_act] = df_principios_act[to_int_cols_act].apply(pd.to_numeric, errors='coerce', axis=1)

    df_principios_nutri = df_principios_nutri['ConOrden', 'TipoPrest', 'CausaS1', 'CausaS2', 'CausaS3', 'CausaS4',
       'ProNutUtilizado', 'RznCausaS41', 'DescRzn41', 'RznCausaS42',
       'DescRzn42', 'CausaS5', 'ProNutDescartado', 'RznCausaS51', 'DescRzn51',
       'RznCausaS52', 'DescRzn52', 'RznCausaS53', 'DescRzn53', 'RznCausaS54',
       'DescRzn54', 'DXEnfHuer', 'DXVIH', 'DXCaPal', 'DXEnfRCEV', 'DXDesPro',
       'TippProNut', 'DescProdNutr', 'CodForma', 'CodViaAdmon', 'JustNoPBS',
       'Dosis', 'DosisUM', 'NoFAdmon', 'CodFreAdmon', 'IndEsp', 'CanTrat',
       'DurTrat', 'CantTotalF', 'UFCantTotal', 'IndRec', 'NoPrescAso',
       'EstJM','NoPrescripcion']
    
    toint_cols_nutri = ['Dosis','CanTrat','CantTotalIF','UFCantTotal']
    df_principios_nutri[toint_cols_nutri] = df_principios_nutri[toint_cols_nutri].apply(pd.to_numeric, errors='coerce', axis=1)

    print(df_prescripcion.dtypes)
    print(df_prescripcion.columns)
    print(df_prescripcion)
    print('columnas de las tablas',df_prescripcion.columns)
    
    df_prescripcion = df_prescripcion.drop_duplicates(subset=['NoPrescripcion','FPrescripcion','CodHabIPS','PAPaciente','CodDxPpal','CodEPS'])

    if ~df_prescripcion.empty and len(df_prescripcion.columns) >0:
        load_df_to_sql(df_prescripcion, db_tmp_table, sql_connid)
        
    return df_prescripcion, df_servicios_complementarios, df_meds, df_principios_act, df_principios_nutri, df_procedimientos

"""FOR RUNNING DAG CODE IN AIRFLOW AND SAVING TO SQL."""

# Se declara el DAG con sus respectivos parámetros
with DAG(
    dag_name,
    catchup=False,
    default_args=default_args,
    # Se establece la ejecución del dag todos los viernes a las 10:00 am(Hora servidor)
    schedule_interval= None,
    max_active_runs=1
    ) as dag:

    # Se declara la función que sirve para denotar el inicio del DAG a través de DummyOperator
    start_task = DummyOperator(task_id='dummy_start')

    func_get_BI_MIPRES_prescripcion_python_task = PythonOperator(task_id = "get_BI_MIPRES_prescripcion",
                                                python_callable = func_get_BI_MIPRES_prescripcion,
                                                )

    #Se declara la función encargada de ejecutar el "Stored Procedure"
    Load_BI_MIPRES_prescripcion = MsSqlOperator(task_id='Load_BI_MIPRES_prescripcion',
                                      mssql_conn_id=sql_connid,
                                      autocommit=True,
                                      sql="EXECUTE sp_load_BI_MIPRES_prescripcion",
                                      )
